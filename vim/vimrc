call plug#begin('~/.vim/plugged')

" ::: FEATURES :::
" << NERDTree >>
Plug 'scrooloose/nerdtree'
" Plug 'Xuyuanp/nerdtree-git-plugin'
" Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
" Plug 'ryanoasis/vim-devicons'
"
" << Git >>
Plug 'tpope/vim-fugitive', { 'on': [ 'Gstatus', 'Gblame', 'Gdiff', 'Gdiffsplit', 'Gbrowse' ] }
Plug 'itchyny/lightline.vim'
Plug 'itchyny/vim-gitbranch'
Plug 'airblade/vim-gitgutter'
Plug 'kshenoy/vim-signature'  " plugin to place, toggle and display marks
"
" << fzf >>
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" Plug 'yuki-ycino/fzf-preview.vim', { 'branch': 'release', 'do': ':UpdateRemotePlugins' }
"
" << other >>
Plug 'tomtom/tcomment_vim' " universal comment vim-plugin that also handles embedded filetypes
Plug 'tpope/vim-surround' " quoting/parenthesizing made simple
" Plug 'Yggdroot/indentLine' " A vim plugin to display the indention levels with thin vertical lines
Plug 'machakann/vim-highlightedyank'
" Plug 'jiangmiao/auto-pairs'
Plug 'RRethy/vim-hexokinase'
"
" ::: LANGUAGE & FRAMEWORK SUPPORT :::
" Plug 'neovim/nvim-lsp'

" Plug 'haorenW1025/completion-nvim'
" Plug 'haorenW1025/diagnostic-nvim'
" Plug 'nvim-treesitter/nvim-treesitter'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Plug 'antoinemadec/coc-fzf'
" Plug 'wellle/tmux-complete.vim' " coc completion from open tmux panes

Plug 'prettier/vim-prettier', { 'do': 'yarn install', 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'yaml', 'html'] }
Plug 'HerringtonDarkholme/yats.vim'
Plug 'othree/yajs.vim'
" Plug 'tpope/vim-markdown', { 'for': ['md', 'markdown'] } " Better markdown support
" Plug 'tpope/vim-dotenv', { 'for': 'env' }
" Plug 'jxnblk/vim-mdx-js', {'for': 'mdx' }
" Plug 'rust-lang/rust.vim', {'for': 'rs'}
" Plug 'cespare/vim-toml', { 'for': 'toml' }  " Toml highlight
" Plug 'tmux-plugins/vim-tmux' "  tmxu.conf editing
" Plug 'TovarishFin/vim-solidity', {'for': 'sol'} " Solidity support

" ::: THEMING :::
" Plug 'arcticicestudio/nord-vim', { 'branch': 'develop' }
" Plug 'sonph/onehalf', {'rtp': 'vim/'}
" Plug 'mhartington/oceanic-next'
" Plug 'hzchirs/vim-material'
" Plug 'tomasr/molokai'
" Plug 'sonph/onehalf', { 'rtp': 'vim' }
" Plug 'rakr/vim-one'
" Plug 'sainnhe/sonokai'
Plug 'sainnhe/forest-night'
" Plug 'mhartington/oceanic-next'
" Plug 'arcticicestudio/nord-vim'
" Plug 'chriskempson/base16-vim'

call plug#end()

filetype plugin indent on
filetype plugin on
set nocompatible
syntax enable
set noerrorbells
set cursorline
" set confirm
set hidden " switch between buffers without error
set number
set relativenumber
set complete=.,w,b,u,U,t,i,d
set completeopt-=preview
set autoindent smartindent " Set Proper Tabs
set backspace=eol,start,indent     " Allow backspacing over indent, eol, & start
set clipboard=unnamed
set scrolloff=5
set tabstop=2
set shiftwidth=2
set softtabstop=2 "   Soft tab width in spaces
set expandtab
set smarttab
set smartindent
set autoindent
set backspace=indent,eol,start  " При нажатии backspace в начале строки, переходит на предыдущую
set selection=exclusive  " Убирает выделение символа конца строки

" set wildmenu
" set wildmode=longest,list,full

" encoding
lang en_US.UTF-8
set encoding=UTF-8
scriptencoding utf-8
set termencoding=utf-8

  let g:highlightedyank_highlight_duration = 1000
  let g:highlightedyank_highlight_duration = 1000

set rtp+=/usr/local/opt/fzf


source $HOME/.dotfiles/vim/syntax.vim
source $HOME/.dotfiles/vim/au.vim
source $HOME/.dotfiles/vim/mappings.vim
source $HOME/.dotfiles/vim/netrw.vim
source $HOME/.dotfiles/vim/search.vim


colorscheme forest-night
set background=dark

let color='true'
let &t_ZH="\e[3m"
let &t_ZR="\e[23m"

" if has('termguicolors')
set termguicolors
" endif

if !has('nvim') && $TERM ==# 'screen-256color'
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

set t_Co=256
set t_ut= " fixes transparent BG on tmux

let g:enable_bold_font = 1
let g:enable_italic_font = 1
let g:oceanic_next_terminal_bold = 1
let g:oceanic_next_terminal_italic = 1
" set guifont=IBM\ Plex\ Mono
set noshowmode " not to show --INSERT--

let g:lightline = {
 		\ 'colorscheme': 'forest-night',
 		\ 'active': {
  		\   'left': [ [ 'mode', 'paste' ],
  		\             [ 'readonly', 'filename', 'modified'],
      \             ['at'],['gitbranch'], [ 'gitdiff' ],  ['filepath']],
  		\   'right': [ [ 'lineinfo' ],
  		\              [ 'percent' ],
  		\              [ 'filetype' ]]
  		\ },
      \ 'inactive': {
      \   'left': [ [ 'filename', 'gitversion' ] ],
      \ },
		\ 'component': {
                \   'at': ''
                \ },
                \ 'component_function': {
                \   'gitbranch': 'gitbranch#name',
                \   'filepath': 'FilenameForLightline'
                \ },
                \ 'component_expand': {
                \   'gitdiff': 'lightline#gitdiff#get',
                \ },
                \ 'component_type': {
                \   'gitdiff': 'middle',
                \ },
		\ }

function! FilenameForLightline()
    return expand('%')
endfunction
