general:
  live_config_reload: true

window:
#   decorations: transparent
  padding:
    x: 10
    y: 10

# Font configuration (changes require restart)
font:
  normal:
    family: Dank Mono
    # family: Berkeley Mono
    style: Regular

  # The bold font face
  bold:
    family: Dank Mono
    style: Bold

  # The italic font face
  italic:
    family: Dank Mono
    style: Italic

  # Point size of the font
  size: 14.0

  offset:
    x: 0
    y: 0

  glyph_offset:
    x: 0
    y: 0

use_thin_strokes: true

draw_bold_text_with_bright_colors: false

custom_cursor_colors: true


### Edge (Light variant)
schemes:
  everforest_dark_hard: &everforest_dark_hard
    primary:
      background: '#272e33'
      foreground: '#d3c6aa'
    normal:
      black:   '#414b50'
      red:     '#e67e80'
      green:   '#a7c080'
      yellow:  '#dbbc7f'
      blue:    '#7fbbb3'
      magenta: '#d699b6'
      cyan:    '#83c092'
      white:   '#d3c6aa'
    bright:
      black:   '#475258'
      red:     '#e67e80'
      green:   '#a7c080'
      yellow:  '#dbbc7f'
      blue:    '#7fbbb3'
      magenta: '#d699b6'
      cyan:    '#83c092'
      white:   '#d3c6aa'
  everforest_dark_medium: &everforest_dark_medium
    primary:
      background: '#2d353b'
      foreground: '#d3c6aa'
    normal:
      black:   '#475258'
      red:     '#e67e80'
      green:   '#a7c080'
      yellow:  '#dbbc7f'
      blue:    '#7fbbb3'
      magenta: '#d699b6'
      cyan:    '#83c092'
      white:   '#d3c6aa'
    bright:
      black:   '#475258'
      red:     '#e67e80'
      green:   '#a7c080'
      yellow:  '#dbbc7f'
      blue:    '#7fbbb3'
      magenta: '#d699b6'
      cyan:    '#83c092'
      white:   '#d3c6aa'
  everforest_dark_soft: &everforest_dark_soft
    primary:
      background: '#333c43'
      foreground: '#d3c6aa'
    normal:
      black:   '#4d5960'
      red:     '#e67e80'
      green:   '#a7c080'
      yellow:  '#dbbc7f'
      blue:    '#7fbbb3'
      magenta: '#d699b6'
      cyan:    '#83c092'
      white:   '#d3c6aa'
    bright:
      black:   '#4d5960'
      red:     '#e67e80'
      green:   '#a7c080'
      yellow:  '#dbbc7f'
      blue:    '#7fbbb3'
      magenta: '#d699b6'
      cyan:    '#83c092'
      white:   '#d3c6aa'
  everforest_light_hard: &everforest_light_hard
    primary:
      background: '#fffbef'
      foreground: '#5c6a72'
    normal:
      black:   '#5c6a72'
      red:     '#f85552'
      green:   '#8da101'
      yellow:  '#dfa000'
      blue:    '#3a94c5'
      magenta: '#df69ba'
      cyan:    '#35a77c'
      white:   '#e8e5d5'
    bright:
      black:   '#5c6a72'
      red:     '#f85552'
      green:   '#8da101'
      yellow:  '#dfa000'
      blue:    '#3a94c5'
      magenta: '#df69ba'
      cyan:    '#35a77c'
      white:   '#e8e5d5'
  everforest_light_medium: &everforest_light_medium
    primary:
      background: '#fdf6e3'
      foreground: '#5c6a72'
    normal:
      black:   '#5c6a72'
      red:     '#f85552'
      green:   '#8da101'
      yellow:  '#dfa000'
      blue:    '#3a94c5'
      magenta: '#df69ba'
      cyan:    '#35a77c'
      white:   '#e0dcc7'
    bright:
      black:   '#5c6a72'
      red:     '#f85552'
      green:   '#8da101'
      yellow:  '#dfa000'
      blue:    '#3a94c5'
      magenta: '#df69ba'
      cyan:    '#35a77c'
      white:   '#e0dcc7'
  everforest_light_soft: &everforest_light_soft
    primary:
      background: '#f3ead3'
      foreground: '#5c6a72'
    normal:
      black:   '#5c6a72'
      red:     '#f85552'
      green:   '#8da101'
      yellow:  '#dfa000'
      blue:    '#3a94c5'
      magenta: '#df69ba'
      cyan:    '#35a77c'
      white:   '#d8d3ba'
    bright:
      black:   '#5c6a72'
      red:     '#f85552'
      green:   '#8da101'
      yellow:  '#dfa000'
      blue:    '#3a94c5'
      magenta: '#df69ba'
      cyan:    '#35a77c'
      white:   '#d8d3ba'

  edge_light:	  &edge_light
    primary:
      background: "0xfafafa"
      foreground: "0x4b505b"

    normal:
      black: "0x4b505b"
      red: "0xd05858"
      green: "0x608e32"
      yellow: "0xbe7e05"
      blue: "0x5079be"
      magenta: "0xb05ccc"
      cyan: "0x3a8b84"
      white: "0xfafafa"

    bright:
      black: "0x4b505b"
      red: "0xd05858"
      green: "0x608e32"
      yellow: "0xbe7e05"
      blue: "0x5079be"
      magenta: "0xb05ccc"
      cyan: "0x3a8b84"
      white: "0xfafafa"


  kanagawa: &kanagawa
    primary:
      background: '0x1f1f28'
      foreground: '0xdcd7ba'

    # Normal colors
    normal:
      black:   '0x090618'
      red:     '0xc34043'
      green:   '0x76946a'
      yellow:  '0xc0a36e'
      blue:    '0x7e9cd8'
      magenta: '0x957fb8'
      cyan:    '0x6a9589'
      white:   '0xc8c093'

    # Bright colors
    bright:
      black:   '0x727169'
      red:     '0xe82424'
      green:   '0x98bb6c'
      yellow:  '0xe6c384'
      blue:    '0x7fb4ca'
      magenta: '0x938aa9'
      cyan:    '0x7aa89f'
      white:   '0xdcd7ba'
    selection:
      background: '0x2d4f67'
      foreground: '0xc8c093'

    indexed_colors:
      - { index: 16, color: '0xffa066' }
      - { index: 17, color: '0xff5d62' }

colors: *everforest_dark_hard

bell:
  animation: EaseOutExpo
  color: '#ffffff'
  duration: 0


# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify a
# key and modifiers required to trigger it, terminal modes where the binding is
# applicable, and what should be done when the key binding fires. It can either
# send a byte sequence to the running application (`chars`), execute a
# predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Bindings are always filled by default, but will be replaced when a new binding
# with the same triggers is defined. To unset a default binding, it can be
# mapped to the `None` action.
#
# Example:
#   `- { key: V, mods: Control|Shift, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Option
#   - Super
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - ToggleFullscreen
#   - None
#
# Values for `action` (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad
#
key_bindings:
  - { key: V,        mods: Command,       action: Paste                        }
  - { key: C,        mods: Command,       action: Copy                         }
  - { key: Q,        mods: Command,       action: Quit                         }
  - { key: N,        mods: Command,       action: SpawnNewInstance             }
  - { key: Return,   mods: Command,       action: ToggleFullscreen             }

  - { key: Home,                          chars: "\x1bOH",   mode: AppCursor   }
  - { key: Home,                          chars: "\x1b[H",   mode: ~AppCursor  }
  - { key: End,                           chars: "\x1bOF",   mode: AppCursor   }
  - { key: End,                           chars: "\x1b[F",   mode: ~AppCursor  }
  - { key: Equals,   mods: Command,       action: IncreaseFontSize             }
  - { key: Minus,    mods: Command,       action: DecreaseFontSize             }
  - { key: Minus,    mods: Command|Shift, action: ResetFontSize                }
  - { key: PageUp,   mods: Shift,         chars: "\x1b[5;2~"                   }
  - { key: PageUp,   mods: Control,       chars: "\x1b[5;5~"                   }
  - { key: PageUp,                        chars: "\x1b[5~"                     }
  - { key: PageDown, mods: Shift,         chars: "\x1b[6;2~"                   }
  - { key: PageDown, mods: Control,       chars: "\x1b[6;5~"                   }
  - { key: PageDown,                      chars: "\x1b[6~"                     }
  - { key: Left,     mods: Shift,         chars: "\x1b[1;2D"                   }
  - { key: Left,     mods: Control,       chars: "\x1b[1;5D"                   }
  - { key: Left,     mods: Alt,           chars: "\x1b[1;3D"                   }
  - { key: Left,                          chars: "\x1b[D",   mode: ~AppCursor  }
  - { key: Left,                          chars: "\x1bOD",   mode: AppCursor   }
  - { key: Right,    mods: Shift,         chars: "\x1b[1;2C"                   }
  - { key: Right,    mods: Control,       chars: "\x1b[1;5C"                   }
  - { key: Right,    mods: Alt,           chars: "\x1b[1;3C"                   }
  - { key: Right,                         chars: "\x1b[C",   mode: ~AppCursor  }
  - { key: Right,                         chars: "\x1bOC",   mode: AppCursor   }
  - { key: Up,       mods: Shift,         chars: "\x1b[1;2A"                   }
  - { key: Up,       mods: Control,       chars: "\x1b[1;5A"                   }
  - { key: Up,       mods: Alt,           chars: "\x1b[1;3A"                   }
  - { key: Up,                            chars: "\x1b[A",   mode: ~AppCursor  }
  - { key: Up,                            chars: "\x1bOA",   mode: AppCursor   }
  - { key: Down,     mods: Shift,         chars: "\x1b[1;2B"                   }
  - { key: Down,     mods: Control,       chars: "\x1b[1;5B"                   }
  - { key: Down,     mods: Alt,           chars: "\x1b[1;3B"                   }
  - { key: Down,                          chars: "\x1b[B",   mode: ~AppCursor  }
  - { key: Down,                          chars: "\x1bOB",   mode: AppCursor   }
  - { key: Tab,      mods: Shift,         chars: "\x1b[Z"                      }
  - { key: F1,                            chars: "\x1bOP"                      }
  - { key: F2,                            chars: "\x1bOQ"                      }
  - { key: F3,                            chars: "\x1bOR"                      }
  - { key: F4,                            chars: "\x1bOS"                      }
  - { key: F5,                            chars: "\x1b[15~"                    }
  - { key: F6,                            chars: "\x1b[17~"                    }
  - { key: F7,                            chars: "\x1b[18~"                    }
  - { key: F8,                            chars: "\x1b[19~"                    }
  - { key: F9,                            chars: "\x1b[20~"                    }
  - { key: F10,                           chars: "\x1b[21~"                    }
  - { key: F11,                           chars: "\x1b[23~"                    }
  - { key: F12,                           chars: "\x1b[24~"                    }
  - { key: Back,                          chars: "\x7f"                        }
  - { key: Back,     mods: Alt,           chars: "\x1b\x7f"                    }
  - { key: Insert,                        chars: "\x1b[2~"                     }
  - { key: Delete,                        chars: "\x1b[3~"                     }

    # shortcuts for tmux. the leader key is control-b (0x02)
  # - { key: W,        mods: Command,       chars: "\x02&"                       }  # close tab (kill)
  # - { key: T,        mods: Command,       chars: "\x02c"                       }  # new tab
  # - { key: RBracket, mods: Command|Shift, chars: "\x02n"                       }  # select next tab
  # - { key: LBracket, mods: Command|Shift, chars: "\x02p"                       }  # select previous tab
  # - { key: RBracket, mods: Command,       chars: "\x02o"                       }  # select next pane
  # - { key: LBracket, mods: Command,       chars: "\x02;"                       }  # select last (previously used) pane
  # - { key: F,        mods: Command,       chars: "\x02/"                       }  # search (upwards) (see tmux.conf)

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: true

  # URL launcher
  # url:
    # This program is executed when clicking on a text which is recognized as a URL.
    # The URL is always added to the command as the last parameter.
    #
    # When set to `None`, URL launching will be disabled completely.
    #
    # Default:
    #   - (macOS) open
    #   - (Linux) xdg-open
    #   - (Windows) explorer
    # launcher:
    #   program: xdg-open
    #   args: []

    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    # modifiers: Control|Shift

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: true

cursor:
  # Cursor style
  #
  # Values for 'style':
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style:
    shape: Block
    blinking: On

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

