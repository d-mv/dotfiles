[user]
	name = Dmitry Melnikov
	email = d.dash.mv@gmail.com
[init]
	defaultBranch=develop
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[color]
  branch = auto
  diff = auto
  stats = auto
  interactive = auto
  status = auto
  ui = true

[color "branch"]
  current = green
  remote = yellow

[color "diff"]
  old = red strike
  new = green italic

[diff]
  tool = vimdiff

[difftool]
  prompt = false

[merge]
	conflictstyle = diff3

[core]
  # pager = less -FRSX
  editor = nvim
  pager = delta

[delta]
	plus-color="#012800" 
	minus-color="#340001" 
	theme='Monokai Extended'
	features = side-by-side line-numbers decorations
  whitespace-error-style = 22 reverse

[interactive]
  diffFilter = delta --color-only

[delta "decorations"]
  commit-decoration-style = bold yellow box ul
  file-style = bold yellow ul
	file-decoration-style = none

[alias]
	abbrev = !sh -c 'git rev-parse --short ${1-`echo HEAD`}' -
	ack = grep --break --heading
	amend = commit --amend -v
	both = diff --ignore-submodules=dirty HEAD
	br = branch
	ci = commit -v
	co = checkout
	count = !git --no-pager log --oneline | wc -l
	cp = cherry-pick

	# http://stackoverflow.com/questions/224687/git-find-duplicate-blobs-files-in-this-tree/8408640#8408640
	dupes = !"git ls-tree -r HEAD | cut -c 13- | sort | uniq -D -w 40"

	ff = merge --ff-only
	fixup = !sh -c 'git commit --fixup=$1 ${@:2}' -
	fresh = remote update --prune
	full = show --format=fuller

	# Shortcut for updating all remotes and fast-forwarding to a specific one:
	# eg. `git get upstream/master`
	get = "!f() { git fresh && git ff \"$@\"; }; f"

	# equivalent to: graph --all
	gr = !git --paginate log --graph --all --pretty=format:'%C(auto)%h%Creset%C(auto)%d%Creset %s %C(magenta bold)(%cr)%Creset %C(cyan)%Creset'

	# requires Git 1.6.3 or later; %C(auto) requires Git 1.8.3 or later
	graph = !git --paginate log --graph --pretty=format:'%C(auto)%h%Creset%C(auto)%d%Creset %s %C(magenta bold)(%cr)%Creset %C(cyan)%Creset'

	jump = "!f() { vcs-jump \"$@\"; }; f"

	# Show just the HEAD commit message (no indent) and nothing else
	message = !git --paginate log -1 --pretty=format:%B
	msg = message

	no-edit = commit --amend --no-edit

	# %C(auto) requires Git 1.8.3 or later
	one = !git --paginate log --pretty=format:'%C(auto)%h%Creset %s%C(auto)%d%Creset %C(magenta bold)(%cr)%Creset %C(cyan)%Creset'
	oneline = !git --paginate log --pretty=format:'%C(auto)%h%Creset %s%C(auto)%d%Creset %C(magenta bold)(%cr)%Creset %C(cyan)%Creset'

	# requires Git 1.5.4 or later
	p = add -p
	patch = add -p

	# requires Git 1.7.11.3 or later
	reword = commit --amend --only -v --

	# requires Git 1.6.2 or later
	rollback = !sh -c 'git reset --merge HEAD~${1-1}' -

	# "smartlog", although it's not that smart.
	# Equivalent to `git graph --all --simplify-by-decoration.
	sl = !git --paginate log --graph --pretty=format:'%C(auto)%h%Creset%C(auto)%d%Creset %s %C(magenta bold)(%cr)%Creset %C(cyan)%Creset' --all --simplify-by-decoration

	st = status
	staged = diff --cached --ignore-submodules=dirty

	# %C(auto) requires Git 1.8.3 or later
	ten = !git --paginate log -10 --pretty=format:'%C(auto)%h%Creset%C(auto)%d%Creset %s %C(magenta bold)(%cr)%Creset %C(cyan)%Creset'

	# compensate for brain damage caused by using Mercurial
	up = checkout

	wc = whatchanged

	# similar to whatchanged, but gives a dir-level overview:
	# usage: git wd [diff-against=HEAD] [max-depth=4]
	wd = "!f() { git --paginate diff --dirstat=cumulative,files,0 ${1:-HEAD} | awk '{print $2}' | cut -d / -f1-${2:-4} | sort | uniq; }; f"
  a = add -A
  b = branch
  br = branch
  ci = commit
  co = checkout
  d = !git --no-pager diff
  df = difftool
  dt  = difftool
  fo = fetch origin
  s = status
  st = status -sb
  stat = !git --no-pager diff --stat
  log-fn = "!f() { git log -L :$1:$2; }; f"
  last = log -1 --oneline
	prune-dry = git remote prune origin --dry-run
  p = push -u origin HEAD
#   # Clean merged branches
  sweep = !git branch --merged master | grep -v 'master$' | xargs git branch -d && git remote prune origin
#   # http://www.jukie.net/bart/blog/pimping-out-git-log
  lg = log --graph --all --pretty=format:'%Cred%h%Creset - %s %Cgreen(%cr) %C(bold blue)%an%Creset %C(yellow)%d%Creset'
  lgd = log --oneline --graph --pretty='[%ad] %C(bold blue)%cn%Creset: %s %C(yellow)%D%Creset' --date=format-local:'%d.%m.%y'
  lgb = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit -15
# # Serve local repo. http://coderwall.com/p/eybtga
#   # Then other can access via `git clone git://#{YOUR_IP_ADDRESS}/
  serve = !git daemon --reuseaddr --verbose  --base-path=. --export-all ./.git
  m = checkout master
  dev = checkout develop
#   # Removes a file from the index
  unstage = reset HEAD --
[help]
  autocorrect = 10

[push]
	default = simple

[branch "master"]
  mergeoptions = --no-edit

[commit]
	template = ~/.dotfiles/.gitmessage.txt

[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process

[pull]
	rebase = false
