!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/6adbc59/
0	tsconfig.json	/^      "es2020"$/;"	s	array:compilerOptions.lib
0	tsconfig.json	/^    "src\/tests",$/;"	s	array:exclude
1	tsconfig.json	/^    "node_modules",$/;"	s	array:exclude
2	tsconfig.json	/^    "public",$/;"	s	array:exclude
3	tsconfig.json	/^    "client"$/;"	s	array:exclude
<C-D>	init.vim	/^map <C-D> :ALEDetail<CR>$/;"	m
<C-O>	init.vim	/^map <C-O> :files<CR>$/;"	m
<C-b>	init.vim	/^map <C-b> :NERDTreeToggle<CR>$/;"	m
<C-d>	init.vim	/^map <C-d> yyp$/;"	m
<S-Tab>	init.vim	/^inoremap <expr> <S-Tab> pumvisible() ? "\\<C-p>" : "\\<S-Tab>"$/;"	m
<TAB>	init.vim	/^imap <silent><expr> <TAB>$/;"	m
<Tab>	init.vim	/^inoremap <expr> <Tab> pumvisible() ? "\\<C-n>" : "\\<Tab>"$/;"	m
<leader>rn	init.vim	/^nmap <leader>rn <Plug>(coc-rename)$/;"	m
CocCurrentFunction	init.vim	/^function! CocCurrentFunction()$/;"	f
K	init.vim	/^nnoremap <silent> K :call <SID>show_documentation()<CR>$/;"	m
NumberToggle	init.vim	/^function! NumberToggle()$/;"	f
Q	init.vim	/^command! Q q " Bind :Q to :q$/;"	c
Qall	init.vim	/^command! Qall qall$/;"	c
W	init.vim	/^command! W w$/;"	c
[c	init.vim	/^nmap <silent> [c <Plug>(coc-diagnostic-prev)$/;"	m
]c	init.vim	/^nmap <silent> ]c <Plug>(coc-diagnostic-next)$/;"	m
allowSyntheticDefaultImports	tsconfig.json	/^    "allowSyntheticDefaultImports": true,$/;"	b	object:compilerOptions
arrowParens	.prettierrc.js	/^  arrowParens: 'avoid',$/;"	p	class:module.exports
base16colorspace	init.vim	/^let base16colorspace=256  " Access colors present in 256 colorspace$/;"	v
baseUrl	tsconfig.json	/^    "baseUrl": ".\/",$/;"	s	object:compilerOptions
bracketSpacing	.prettierrc.js	/^  bracketSpacing: false, \/\/ upgrade to 60.5$/;"	p	class:module.exports
color	init.vim	/^let color='true'$/;"	v
compilerOptions	tsconfig.json	/^  "compilerOptions": {$/;"	o
emitDecoratorMetadata	tsconfig.json	/^  "emitDecoratorMetadata": true$/;"	b
endOfLine	.prettierrc.js	/^  endOfLine: 'lf',$/;"	p	class:module.exports
env	.eslintrc.js	/^  env: {$/;"	c	class:module.exports
es6	.eslintrc.js	/^    es6: true,$/;"	p	class:module.exports.env
esModuleInterop	tsconfig.json	/^    "esModuleInterop": true,$/;"	b	object:compilerOptions
exclude	tsconfig.json	/^  "exclude": [$/;"	a
experimentalDecorators	tsconfig.json	/^    "experimentalDecorators": true,$/;"	b	object:compilerOptions
experimentalDecorators	tsconfig.json	/^  "experimentalDecorators": true,$/;"	b
exports	.eslintrc.js	/^module.exports = {$/;"	c	class:module
exports	.prettierrc.js	/^module.exports = {$/;"	c	class:module
g:DevIconsDefaultFolderOpenSymbol	init.vim	/^let g:DevIconsDefaultFolderOpenSymbol = ' '$/;"	v
g:DevIconsEnableFoldersOpenClose	init.vim	/^let g:DevIconsEnableFoldersOpenClose = 1$/;"	v
g:NERDTreeAutoDeleteBuffer	init.vim	/^let g:NERDTreeAutoDeleteBuffer = 1$/;"	v
g:NERDTreeDirArrows	init.vim	/^let g:NERDTreeDirArrows = 1$/;"	v
g:NERDTreeExactMatchHighlightColor	init.vim	/^let g:NERDTreeExactMatchHighlightColor = {} " this line is needed to avoid error$/;"	v
g:NERDTreeExactMatchHighlightColor	init.vim	/^let g:NERDTreeExactMatchHighlightColor['.gitignore'] = s:git_orange " sets the color for .gitign/;"	v
g:NERDTreeExactMatchHighlightFullName	init.vim	/^let g:NERDTreeExactMatchHighlightFullName = 1$/;"	v
g:NERDTreeFileExtensionHighlightFullName	init.vim	/^let g:NERDTreeFileExtensionHighlightFullName = 1$/;"	v
g:NERDTreeHighlightCursorline	init.vim	/^let g:NERDTreeHighlightCursorline = 0$/;"	v
g:NERDTreeHighlightFolders	init.vim	/^let g:NERDTreeHighlightFolders = 1 " enables folder icon highlighting using exact match$/;"	v
g:NERDTreeHighlightFoldersFullName	init.vim	/^let g:NERDTreeHighlightFoldersFullName = base16colorspace$/;"	v
g:NERDTreeIgnore	init.vim	/^let g:NERDTreeIgnore = ['^\\~$[[dir]]', '^\\.git$[[dir]]','^\\.o$[[file]]', '^\\.pyc$[[file]]', /;"	v
g:NERDTreeIndicatorMapCustom	init.vim	/^let g:NERDTreeIndicatorMapCustom = {$/;"	v
g:NERDTreeMinimalUI	init.vim	/^let g:NERDTreeMinimalUI = 1$/;"	v
g:NERDTreePatternMatchHighlightColor	init.vim	/^let g:NERDTreePatternMatchHighlightColor = {} " this line is needed to avoid error$/;"	v
g:NERDTreePatternMatchHighlightColor	init.vim	/^let g:NERDTreePatternMatchHighlightColor['.*_spec\\.rb$'] = s:rspec_red " sets the color for fil/;"	v
g:NERDTreePatternMatchHighlightFullName	init.vim	/^let g:NERDTreePatternMatchHighlightFullName = 1$/;"	v
g:NERDTreeShowHidden	init.vim	/^let g:NERDTreeShowHidden = 1$/;"	v
g:WebDevIconsConcealNerdtreeBrackets	init.vim	/^let g:WebDevIconsConcealNerdtreeBrackets = 1$/;"	v
g:WebDevIconsNerdTreeAfterGlyphPadding	init.vim	/^let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExactSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols = {} " needed$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExactSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['.editorconfig'] = ''$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExactSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['.env'] = 'ﭩ'$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExactSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['.npmrc'] = ''$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExactSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['Rakefile'] = ''$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExactSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['ormconfig.js'] = ''$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExactSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['src'] = ' '$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['coffee'] = ''$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['css'] = ''$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['erb'] = ''$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['html'] = ''$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['js'] = ''$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['json'] = ''$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['jsx'] = 'ﰆ'$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['log'] = ''$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['md'] = ''$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['rb'] = ''$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['sass'] = ''$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['scss'] = ''$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['slim'] = ''$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['ts'] = 'ﯤ'$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['txt'] = ''$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['vim'] = ''$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['yaml'] = ''$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['yml'] = ''$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols = {}$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.*vimrc.*'] = ''$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.editorconfig']='ﬥ'$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.eslint']='ﬥ'$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.git'] = ' '$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.gitignore'] = ''$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.prettierrc']='ﬥ'$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.test.js'] = 'ﭧ'$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.test.ts'] = 'ﭧ'$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.vscode'] = ' '$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['node_modules'] = ' '$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['package.json'] = ''$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['package.lock.json'] = ''$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['tsconfig.json']='ﬥ'$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['webpack\\.'] = 'ﰩ'$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols	init.vim	/^let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['yarn.lock'] = ''$/;"	v
g:WebDevIconsUnicodeDecorateFolderNodes	init.vim	/^let g:WebDevIconsUnicodeDecorateFolderNodes = 1$/;"	v
g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol	init.vim	/^let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = ' '$/;"	v
g:WebDevIconsUnicodeGlyphDoubleWidth	init.vim	/^let g:WebDevIconsUnicodeGlyphDoubleWidth = 1$/;"	v
g:closetag_close_shortcut	init.vim	/^let g:closetag_close_shortcut = '<leader>>'$/;"	v
g:closetag_emptyTags_caseSensitive	init.vim	/^let g:closetag_emptyTags_caseSensitive = 1 " This will make the list of non closing tags case se/;"	v
g:closetag_filenames	init.vim	/^let g:closetag_filenames = '*.html,*.xhtml,*.phtml'$/;"	v
g:closetag_shortcut	init.vim	/^let g:closetag_shortcut = '>'$/;"	v
g:closetag_xhtml_filenames	init.vim	/^let g:closetag_xhtml_filenames = '*.xhtml,*.jsx, *js,*.ts,*.tsx'$/;"	v
g:coc_global_extensions	init.vim	/^let g:coc_global_extensions = ['coc-tslint-plugin', 'coc-tsserver', 'coc-emmet', 'coc-css', 'coc/;"	v
g:lightline	init.vim	/^let g:lightline = {'colorscheme':'solarized'}$/;"	v
g:mta_filetypes	init.vim	/^let g:mta_filetypes= {$/;"	v
g:prettier#autoformat	init.vim	/^let g:prettier#autoformat = 1$/;"	v
g:webdevicons_conceal_nerdtree_brackets	init.vim	/^let g:webdevicons_conceal_nerdtree_brackets = 1$/;"	v
gd	init.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
gi	init.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
gr	init.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
gy	init.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
html_ignore_folding	init.vim	/^let html_ignore_folding = 1$/;"	v
html_number_lines	init.vim	/^let html_number_lines = 1$/;"	v
html_use_css	init.vim	/^let html_use_css = 1$/;"	v
isolatedModules	tsconfig.json	/^    "isolatedModules": true,$/;"	b	object:compilerOptions
jsxBracketSameLine	.prettierrc.js	/^  jsxBracketSameLine: true,$/;"	p	class:module.exports
jsxSingleQuote	.prettierrc.js	/^  jsxSingleQuote: true,$/;"	p	class:module.exports
lib	tsconfig.json	/^    "lib": [$/;"	a	object:compilerOptions
module	tsconfig.json	/^    "module": "commonjs",$/;"	s	object:compilerOptions
moduleResolution	tsconfig.json	/^    "moduleResolution": "node",$/;"	s	object:compilerOptions
node	.eslintrc.js	/^    node: true,$/;"	p	class:module.exports.env
outDir	tsconfig.json	/^    "outDir": "build",$/;"	s	object:compilerOptions
overrides	.prettierrc.js	/^  overrides: [$/;"	p	class:module.exports
parser	.eslintrc.js	/^  parser: '@typescript-eslint\/parser',$/;"	p	class:module.exports
plugins	.eslintrc.js	/^  plugins: '\/usr\/local\/lib\/node_modules\/eslint-plugin-import',$/;"	p	class:module.exports
printWidth	.prettierrc.js	/^  printWidth: 90,$/;"	p	class:module.exports
removeComments	tsconfig.json	/^    "removeComments": true,$/;"	b	object:compilerOptions
rootDir	tsconfig.json	/^    "rootDir": "src",$/;"	s	object:compilerOptions
s:aqua	init.vim	/^let s:aqua =  "3AFFDB"$/;"	v
s:beige	init.vim	/^let s:beige = "F5C06F"$/;"	v
s:blue	init.vim	/^let s:blue = "689FB6"$/;"	v
s:brown	init.vim	/^let s:brown = "905532"$/;"	v
s:check_back_space	init.vim	/^function! s:check_back_space() abort "{{{$/;"	f
s:darkBlue	init.vim	/^let s:darkBlue = "44788E"$/;"	v
s:darkOrange	init.vim	/^let s:darkOrange = "F16529"$/;"	v
s:git_orange	init.vim	/^let s:git_orange = 'F54D27'$/;"	v
s:green	init.vim	/^let s:green = "8FAA54"$/;"	v
s:lightGreen	init.vim	/^let s:lightGreen = "31B53E"$/;"	v
s:lightPurple	init.vim	/^let s:lightPurple = "834F79"$/;"	v
s:orange	init.vim	/^let s:orange = "D4843E"$/;"	v
s:pink	init.vim	/^let s:pink = "CB6F6F"$/;"	v
s:purple	init.vim	/^let s:purple = "834F79"$/;"	v
s:red	init.vim	/^let s:red = "AE403F"$/;"	v
s:rspec_red	init.vim	/^let s:rspec_red = 'FE405F'$/;"	v
s:salmon	init.vim	/^let s:salmon = "EE6E73"$/;"	v
s:show_documentation	init.vim	/^function! s:show_documentation()$/;"	f
s:white	init.vim	/^let s:white = "FFFFFF"$/;"	v
s:yellow	init.vim	/^let s:yellow = "F09F17"$/;"	v
semi	.prettierrc.js	/^  semi: true,$/;"	p	class:module.exports
singleQuote	.prettierrc.js	/^  singleQuote: true,$/;"	p	class:module.exports
sourceMap	tsconfig.json	/^    "sourceMap": true,$/;"	b	object:compilerOptions
strict	tsconfig.json	/^    "strict": true,$/;"	b	object:compilerOptions
tabWidth	.prettierrc.js	/^  tabWidth: 2,$/;"	p	class:module.exports
target	tsconfig.json	/^    "target": "es6",$/;"	s	object:compilerOptions
trailingComma	.prettierrc.js	/^  trailingComma: 'all', \/\/ upgrade to 60.5$/;"	p	class:module.exports
use_xhtml	init.vim	/^let use_xhtml = 1$/;"	v
xml_use_xhtml	init.vim	/^let xml_use_xhtml = 1$/;"	v
